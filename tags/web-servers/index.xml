<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Servers on Agones</title>
    <link>http://localhost:1313/tags/web-servers/</link>
    <description>Recent content in Web Servers on Agones</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hari@dasarpai.com (Hari Thapliyaal)</managingEditor>
    <webMaster>hari@dasarpai.com (Hari Thapliyaal)</webMaster>
    <lastBuildDate>Thu, 08 May 2025 11:34:17 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/web-servers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Navigating Python Ecosystem</title>
      <link>http://localhost:1313/dsblog/Navigating-Python-Ecosystem/</link>
      <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/Navigating-Python-Ecosystem/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6178-Navigating-Python-Ecosystem.jpg&#34; alt=&#34;Navigating Python Ecosystem&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;navigating-python-ecosystem&#34;&gt;Navigating Python Ecosystem&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-history-of-python-development&#34;&gt;1. &lt;strong&gt;History of Python Development&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Python was created by &lt;strong&gt;Guido van Rossum&lt;/strong&gt; and was first released in 1991. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code compared to other languages like C++ or Java. Significant milestones in Python’s development include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Python 1.x (1991-2000):&lt;/strong&gt; The initial release introduced core concepts like dynamic typing, exception handling, and module support.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Python 2.x (2000-2020):&lt;/strong&gt; A major update, featuring Unicode support, list comprehensions, and improvements to object-oriented programming. However, the 2.x series was discontinued in 2020.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Python 3.x (2008-present):&lt;/strong&gt; The transition to Python 3 introduced significant changes that broke backward compatibility with Python 2, emphasizing cleaner code, improved consistency, and optimizations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Python’s growth surged with its adoption in various domains like web development, data science, machine learning, and scripting due to its simplicity, community-driven development, and rich ecosystem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Processors for HTML CSS JS Code</title>
      <link>http://localhost:1313/dsblog/Processors-for-HTML-CSS-JS-Code/</link>
      <pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/Processors-for-HTML-CSS-JS-Code/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6177-Processors-for-HTML-CSS-JS-Code.jpg&#34; alt=&#34;Processors for HTML CSS JS Code&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;processors-for-html-css-and-js-code&#34;&gt;Processors for HTML, CSS, and JS Code&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-are-html-processors&#34;&gt;What are HTML Processors?&lt;/h2&gt;&#xA;&lt;p&gt;HTML processors (or preprocessors) extend HTML functionality by adding new features like templating, reusable components, loops, conditionals, and more. They simplify development by generating standard HTML with enhanced capabilities. Below are some of the most popular HTML processors and what they do:&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-pug-formerly-jade&#34;&gt;1. &lt;strong&gt;Pug (formerly Jade)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: Templating, variables, loops, conditionals, mixins, and more concise syntax.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;What it Does&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Uses indentation instead of tags and braces, resulting in a cleaner, more readable syntax.&lt;/li&gt;&#xA;&lt;li&gt;Provides support for template logic like loops and conditionals (&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Mixins allow reusable chunks of code, like buttons or UI components.&lt;/li&gt;&#xA;&lt;li&gt;Supports template inheritance, where layouts can be extended.&lt;/li&gt;&#xA;&lt;li&gt;Compiles into HTML, useful for creating dynamic pages.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring Popular Web Server</title>
      <link>http://localhost:1313/dsblog/Exploring-Popular-Web-Server/</link>
      <pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/Exploring-Popular-Web-Server/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6176-Exploring-Popular-Web-Server.jpg&#34; alt=&#34;Exploring Popular Web Server&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;exploring-popular-web-server&#34;&gt;Exploring Popular Web Server&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-is-webserver&#34;&gt;What is Webserver?&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;strong&gt;web server&lt;/strong&gt; is software or hardware that serves web content to users over the internet. It hosts, processes, and delivers web pages to clients, typically web browsers, when users request a website by entering its URL. Here’s a breakdown of what a web server does and its components:&lt;/p&gt;&#xA;&lt;h3 id=&#34;key-functions-of-a-web-server&#34;&gt;Key Functions of a Web Server:&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hosting Content:&lt;/strong&gt; A web server stores website files, such as HTML, CSS, JavaScript, images, and other resources.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Handling Requests:&lt;/strong&gt; It listens for incoming requests from clients (usually browsers) and responds to them by serving the requested files or data.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Serving Content:&lt;/strong&gt; The server delivers the requested content to the client, often formatted as HTML or other resources necessary to render a webpage.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;how-a-web-server-works&#34;&gt;How a Web Server Works:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Request-Response Cycle:&lt;/strong&gt; When a user enters a URL or clicks on a link, the browser sends an HTTP (or HTTPS) request to the server. The server processes the request and responds with the requested resources.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Static and Dynamic Content:&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Static&lt;/strong&gt; files (like HTML and images) are delivered as-is.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Dynamic&lt;/strong&gt; content may be generated in real-time by backend applications (like PHP, Node.js, or Python scripts) before being sent to the client.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;types-of-web-servers&#34;&gt;Types of Web Servers:&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Static Servers:&lt;/strong&gt; These servers serve only static files and are ideal for sites where content does not change dynamically. For example, if you create a static website using a framework like Jekyll, the static pages are generated at deployment. If you want to make changes to the website, you’ll need to redeploy it. If you have not used any framework then you can add new pages or update existing ones without redeploying the entire site.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
