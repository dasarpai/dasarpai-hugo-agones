<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development Environment on Agones</title>
    <link>http://localhost:1313/tags/development-environment/</link>
    <description>Recent content in Development Environment on Agones</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hari@dasarpai.com (Hari Thapliyaal)</managingEditor>
    <webMaster>hari@dasarpai.com (Hari Thapliyaal)</webMaster>
    <lastBuildDate>Thu, 08 May 2025 11:34:17 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/development-environment/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring and Evaluating Integrated Development Environments (IDEs)</title>
      <link>http://localhost:1313/dsblog/exploring-and-evaluating-ides/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/exploring-and-evaluating-ides/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6235-Exploring-and-Evaluating-IDEs.jpg&#34; alt=&#34;Explroring IDEs&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;exploring-and-evaluating-integrated-development-environments-ides&#34;&gt;Exploring and Evaluating Integrated Development Environments (IDEs)&lt;/h1&gt;&#xA;&lt;p&gt;In this article we will explore the history of IDEs and how they have evolved over time. Apart from this we will see how to evalute the best IDE for your needs and what are IDE in AI era.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-broad-timeline-of-ide-development&#34;&gt;A Broad Timeline of IDE Development&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Efficiency (1970s–1980s)&lt;/strong&gt;: Focus on minimalism and raw functionality for basic coding tasks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enhancement (1980s–1990s)&lt;/strong&gt;: Adding productivity tools and integration for growing complexity.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Integration (1990s–2000s)&lt;/strong&gt;: Combining editing, debugging, and building into a cohesive environment.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Collaboration (2000s–2010s)&lt;/strong&gt;: Expanding accessibility and teamwork via cloud and networks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Intelligence (2010s–Early 2020s)&lt;/strong&gt;: Leveraging AI for smarter, reactive assistance.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Agency (Mid-2020s)&lt;/strong&gt;: Shifting to proactive, context-aware systems that act as co-developers.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;features-to-evaluate-ide&#34;&gt;Features to Evaluate IDE&lt;/h2&gt;&#xA;&lt;p&gt;To compare any Integrated Development Environment (IDE) we need a structured set of features that capture both traditional IDE capabilities and the advanced AI-driven functionalities. These features span core IDE functionality, AI-specific enhancements, usability, and integration, allowing for a fair evaluation competitors like windsurf, Cursor, VS Code with Copilot, JetBrains, or others. Currently I am using windsurf heavily so this feature list is influenced by windsurf.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with GitHub from WSL and Windows Folders</title>
      <link>http://localhost:1313/dsblog/working-with-github-from-wsl-and-windows-folders/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/working-with-github-from-wsl-and-windows-folders/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6234-Working-with-Github-from-WSL-and-Windows-Folders.jpg&#34; alt=&#34;Working with GitHub from WSL and Windows Folders&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement:&lt;/h2&gt;&#xA;&lt;p&gt;I have project in D:\github-blog\dasarpai-websitetest. This is also a github repo. It&amp;rsquo;s remote repo is &lt;a href=&#34;https://github.com/dasarpai/dasarpai-websitetest&#34;&gt;https://github.com/dasarpai/dasarpai-websitetest&lt;/a&gt;. I have github desktop for windows 11 installed on my machine. Sometime I push/pull files in github repo using this github desktop. I have Visual Code IDE installed on my windows 11 machine and I also visual code IDE on my machine&amp;rsquo;s wsl.&lt;/p&gt;&#xA;&lt;p&gt;When I am working with this project from windows 11 or wsl then sometimes file will get updated.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting Up a Development Environment with Windows 11, WSL2 and Docker</title>
      <link>http://localhost:1313/dsblog/development-environment-with-windows-11-wsl2-and-docker/</link>
      <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/development-environment-with-windows-11-wsl2-and-docker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6222-Setting-Up-a-Development-Environment-with-Windows-11-WSL2-and-Docker.jpg&#34; alt=&#34;Setting Development Environment with WSL2, Docker and Github&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;setting-development-environment-with-wsl2-docker-and-github&#34;&gt;Setting Development Environment with WSL2, Docker and Github&lt;/h1&gt;&#xA;&lt;p&gt;This quick tutorial is about setting Up a Development Environment with Windows 11, WSL 2, Docker and Github&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Like any other operating system, Windows has its strengths and weaknesses. But what if you believe that the democratization of technology is best achieved through open-source solutions, and that Linux is the key to this future? What’s the next step for you?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring Docker and VS Code Integration</title>
      <link>http://localhost:1313/dsblog/Exploring-Docker-and-VS-Code-Integration/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/Exploring-Docker-and-VS-Code-Integration/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6151-Exploring-Docker-and-VS-Code-Integration.jpg&#34; alt=&#34;Exploring Docker and VS Code Integration&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;exploring-docker-and-vs-code-integration&#34;&gt;Exploring Docker and VS Code Integration&lt;/h1&gt;&#xA;&lt;h2 id=&#34;is-this-article-for-me&#34;&gt;Is this article for me?&lt;/h2&gt;&#xA;&lt;p&gt;If you are interested in docker, containers, VS Code and development and looking answers for the following questions then keep reading.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Question: What is use of target in docker container&amp;rsquo;s volume?&lt;/li&gt;&#xA;&lt;li&gt;Question: If I remove the contents of /vscode folder then what will happen?&lt;/li&gt;&#xA;&lt;li&gt;Question: When I have VS Code installed on my machine then why I need &amp;ldquo;VS Code Remote - Containers&amp;rdquo;?&lt;/li&gt;&#xA;&lt;li&gt;Question: Can I use &amp;ldquo;VS Code Remote - Containers&amp;rdquo; with local VS Code?&lt;/li&gt;&#xA;&lt;li&gt;Question: Can I use &amp;ldquo;VS Code Remote - Containers&amp;rdquo; without local VS Code?&lt;/li&gt;&#xA;&lt;li&gt;Question: What are formatters, linters, debuggers, profiler etc other related terms?&lt;/li&gt;&#xA;&lt;li&gt;Question: I have datasets on my local drive d:/project-datasets. How to access them from docker?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;question-what-is-use-of-target-in-docker-containers-volume&#34;&gt;Question: What is use of target in docker container&amp;rsquo;s volume?&lt;/h2&gt;&#xA;&lt;p&gt;I have a volume in container in docker. The volume name is minikube-config.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Project Folders and Files</title>
      <link>http://localhost:1313/dsblog/Python-Project-Folders-and-Files/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/Python-Project-Folders-and-Files/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6145-Python-Project-Folders-and-Files.jpg&#34; alt=&#34;Python Project Folders and Files&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;understanding-python-project-folder-structures-essential-directories-explained&#34;&gt;Understanding Python Project Folder Structures: Essential Directories Explained&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In Python projects, certain folders and files serve specific purposes to help with organizing code, managing dependencies, setting up environments, and handling version control. These important directories and files are often seen in most well-structured Python projects. Here are some of the most common ones:&lt;/p&gt;&#xA;&lt;h2 id=&#34;question-what-are-key-folders-and-files-in-python-project&#34;&gt;Question: What are key folders and files in Python Project?&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-venv&#34;&gt;1. &lt;strong&gt;&lt;code&gt;venv&lt;/code&gt; / &lt;code&gt;.venv&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: This is a &lt;strong&gt;virtual environment&lt;/strong&gt; folder that contains all the dependencies installed for a project.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: Virtual environments isolate dependencies for each project so that you avoid conflicts between versions of packages that different projects might use.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Local development environments where Python packages are installed per project.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How it&amp;rsquo;s created&lt;/strong&gt;: Using &lt;code&gt;python -m venv venv&lt;/code&gt; or &lt;code&gt;python -m venv .venv&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-env&#34;&gt;2. &lt;strong&gt;&lt;code&gt;env&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: This folder contains environment-specific variables, typically used for storing configuration secrets like API keys and database credentials. Do not confuse this with venv or .venv folder which has virtual environment.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: Keeping sensitive information outside the codebase is a security best practice.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Most Python projects, where &lt;code&gt;.env&lt;/code&gt; files are used with packages like &lt;code&gt;python-dotenv&lt;/code&gt; to load environment variables.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-scripts&#34;&gt;3. &lt;strong&gt;&lt;code&gt;scripts&lt;/code&gt; or &lt;code&gt;bin&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Contains custom scripts or executable files that are part of the project. Do not confuse this folder with venv/Script folder.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: This folder is useful for organizing command-line tools or automation scripts that are part of the project.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Projects that require custom scripts for deployment, automation, or management.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-config&#34;&gt;4. &lt;strong&gt;&lt;code&gt;config&lt;/code&gt; or &lt;code&gt;settings&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Stores configuration files or settings, often in formats like JSON, YAML, or &lt;code&gt;.ini&lt;/code&gt;. Some frameworks (like Django) use this folder for their settings.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: Keeping configuration in a separate folder helps modularize your project, especially for different environments (e.g., &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;production&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Any project that requires multiple environments or has a complex configuration.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-build&#34;&gt;5. &lt;strong&gt;&lt;code&gt;build&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt; Folders&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: These folders contain the &lt;strong&gt;compiled distributions&lt;/strong&gt; of your package, typically generated by tools like &lt;code&gt;setuptools&lt;/code&gt; or &lt;code&gt;poetry&lt;/code&gt; when packaging your project.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: If you&amp;rsquo;re distributing your project as a package (e.g., on PyPI), these folders hold the files that get uploaded.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Python projects that are packaged and distributed as libraries or applications.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How it&amp;rsquo;s created&lt;/strong&gt;: Using &lt;code&gt;python setup.py sdist&lt;/code&gt; or &lt;code&gt;poetry build&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-src&#34;&gt;6. &lt;strong&gt;&lt;code&gt;src&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Some projects store all their source code inside a &lt;code&gt;src/&lt;/code&gt; directory to make the distinction between code and other project files.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: It helps enforce a cleaner project structure and avoids accidental import issues, where test files or other modules might be wrongly imported.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Medium to large-sized projects where organization is critical.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-docs&#34;&gt;7. &lt;strong&gt;&lt;code&gt;docs&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Contains project documentation, such as API references, guides, and other written materials.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: Good documentation helps users and contributors understand how to use and contribute to the project.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Larger open-source or professional projects.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: This folder often contains &lt;code&gt;Sphinx&lt;/code&gt; or &lt;code&gt;MkDocs&lt;/code&gt; configuration files for generating HTML or PDF documentation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-migrations&#34;&gt;8. &lt;strong&gt;&lt;code&gt;migrations&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: If using a web framework like Django, this folder contains migration files that track changes to the database schema.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: Migrations allow for smooth upgrades and downgrades of your database schema over time.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Projects that use an ORM (Object-Relational Mapper) like Django&amp;rsquo;s or SQLAlchemy&amp;rsquo;s migration system.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;9-git&#34;&gt;9. &lt;strong&gt;&lt;code&gt;.git&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: This is a hidden folder that Git uses to track all version control information for your project.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: It stores the entire history of changes to your code, along with branch information, commit data, and more.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Any project that is tracked using Git (and typically hosted on platforms like GitHub, GitLab, etc.).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How it&amp;rsquo;s created&lt;/strong&gt;: By initializing a Git repository with &lt;code&gt;git init&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;10-notebooks&#34;&gt;10. &lt;strong&gt;&lt;code&gt;notebooks&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Holds Jupyter notebooks (&lt;code&gt;.ipynb&lt;/code&gt; files) for interactive code, data exploration, or tutorials.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: This is especially useful for projects related to data science, machine learning, or educational materials.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Data science and machine learning projects, as well as educational repositories.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;11-tests&#34;&gt;11. &lt;strong&gt;&lt;code&gt;tests&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Contains test cases and test scripts for your project.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: Having a dedicated &lt;code&gt;tests&lt;/code&gt; folder makes it easier to organize and run unit tests, ensuring the reliability of your code.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Any professional Python project following good development practices.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Python projects often use testing frameworks like &lt;code&gt;unittest&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt;, or &lt;code&gt;nose&lt;/code&gt; to write and run tests in this folder.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-__pycache__&#34;&gt;12. &lt;strong&gt;&lt;code&gt;__pycache__&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Python stores compiled bytecode in this folder to speed up module loading.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: It helps Python run faster by storing the compiled versions of your scripts so that they don’t need to be recompiled each time they are run.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Any Python project or module once the code has been executed.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How it&amp;rsquo;s created&lt;/strong&gt;: Automatically generated by Python when running scripts.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;13-static&#34;&gt;13. &lt;strong&gt;&lt;code&gt;static&lt;/code&gt; or &lt;code&gt;assets&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Stores static files such as images, CSS, JavaScript, etc., used in web projects.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: Web projects, especially in frameworks like Django or Flask, need a place to keep static files that are served directly to the client.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Web development projects.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;14-data&#34;&gt;14. &lt;strong&gt;&lt;code&gt;data&lt;/code&gt; Folder&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Stores raw or processed datasets that are used in the project.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Why it&amp;rsquo;s important&lt;/strong&gt;: In data science or machine learning projects, keeping datasets organized is crucial for reproducibility and versioning.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Commonly Seen In&lt;/strong&gt;: Data science and machine learning projects.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;summary-of-common-folders-in-a-python-project&#34;&gt;Summary of Common Folders in a Python Project:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;.venv&lt;/code&gt;/&lt;code&gt;venv&lt;/code&gt;: Virtual environment.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;__pycache__&lt;/code&gt;: Compiled bytecode.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: Test cases.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;src&lt;/code&gt;: Source code.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: Documentation.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;build&lt;/code&gt;/&lt;code&gt;dist&lt;/code&gt;: Distribution files.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;migrations&lt;/code&gt;: Database migrations.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;.git&lt;/code&gt;: Git version control.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;notebooks&lt;/code&gt;: Jupyter notebooks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;config&lt;/code&gt;: Configuration files.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;static&lt;/code&gt;/&lt;code&gt;assets&lt;/code&gt;: Static files for web apps.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;: Custom scripts.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: Datasets.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By organizing these folders properly, Python projects can be easier to navigate, maintain, and collaborate on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tensorflow GPU Setup on Local Machine</title>
      <link>http://localhost:1313/dsblog/Tensorflow-gpu-setup-on-local-machine/</link>
      <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate><author>hari@dasarpai.com (Hari Thapliyaal)</author>
      <guid>http://localhost:1313/dsblog/Tensorflow-gpu-setup-on-local-machine/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/assets/images/dspost/dsp6140-Tensorflow-gpu-setup-on-local-machine.jpg&#34; alt=&#34;Tensorflow GPU Setup on Local Machine&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;tensorflow-gpu-setup-on-local-machine&#34;&gt;Tensorflow GPU Setup on Local Machine&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Tensorflow, pytorch are deep learning libraries or packages. Tensorflow is developed by google and pytorch is developed by Meta. There are some other but these are the most popular one among Machine Learning and Deep Learning Engineers. If you are doing anything significant in NLP, computer vision, voice processing you must have used this library. But the power of the these libraries lies in parallel metrics/tensor computation. For that they use hardwardes like GPU or TPU which has thousands of core and they designed purely for metrics/tensor processing. Intially they were used for gaming purpose but with the surge of AI these machines are in high use and used for model training and inference purpose.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
